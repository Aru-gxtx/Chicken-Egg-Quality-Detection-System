from fastapi import FastAPI, UploadFile, Form
from fastapi.staticfiles import StaticFiles
from pymongo import MongoClient
from datetime import datetime
import shutil

app = FastAPI()

# Connect MongoDB
client = MongoClient("mongodb://localhost:27017/")
db = client["egg_database"]
collection = db["eggs"]

# Mount images directory so Flutter can access
app.mount("/images", StaticFiles(directory="images"), name="images")

@app.post("/egg")
async def upload_egg(image: UploadFile, size: str = Form(...), grade: str = Form(...)):
    # Save image file
    filepath = f"images/{image.filename}"
    with open(filepath, "wb") as buffer:
        shutil.copyfileobj(image.file, buffer)
    
    # Save record to DB
    record = {
        "image": image.filename,
        "size": size,
        "grade": grade,
        "timestamp": datetime.now().isoformat()
    }
    collection.insert_one(record)
    return {"message": "Egg data saved!"}

@app.get("/eggs")
def get_eggs():
    # Return eggs sorted by newest first
    eggs = list(collection.find({}, {"_id": 0}).sort("timestamp", -1))
    return {"eggs": eggs}
// eggs = list(collection.find({}, {"_id": 0}))
sudo systemctl status mongod
sudo apt update
sudo apt install -y mongodb





from fastapi import FastAPI
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
import json
import os

app = FastAPI()

# Allow Flutter (different device) to access the API
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # for testing, allow all
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Path to your existing data
EGG_JSON_PATH = "/home/group4PI/Documents/eggs/eggs.json"
EGG_IMAGES_DIR = "/home/group4PI/Documents/eggs/"

# Serve images from your egg folder
app.mount("/images", StaticFiles(directory=EGG_IMAGES_DIR), name="images")


@app.get("/eggs")
def get_eggs():
    """Read egg data from JSON file and return in Flutter-compatible format."""
    if not os.path.exists(EGG_JSON_PATH):
        return {"eggs": []}

    with open(EGG_JSON_PATH, "r") as f:
        egg_data = json.load(f)

    eggs = []
    for e in egg_data:
        # Map to Flutter’s expected fields
        image_filename = os.path.basename(e["image_path"])
        eggs.append({
            "image": image_filename,
            "grade": e["label"],       # label → grade
            "size": e["size"],         # keep size
            "confidence": e["confidence"],
            "timestamp": e["timestamp"]
        })

    return {"eggs": eggs}
